#!/usr/bin/env pypy3
# type: ignore
import os
import sys
import argh
import collections
import subprocess
import time
import pool.thread
import tornado.ioloop
import util.misc
import web
import ssl

state = {}

async def handler(request: web.Request) -> web.Response:
    auth = state['auth']
    if auth and [auth] != request['query'].get('auth', []):
        return {'code': 401,
                'body': '401'}
    else:
        with open('index.html') as f:
            return {'code': 200,
                    'body': (f.read()
                             .replace('AUTH', auth or 'AUTH')
                             .replace('MILLIS_PER_FRAME', str(state['millis'])))}

async def js_handler(request: web.Request) -> web.Response:
    auth = state['auth']
    if auth and [auth] != request['query'].get('auth', []):
        return {'code': 401,
                'body': '401'}
    else:
        with open('axios.min.js') as f:
            return {'code': 200,
                    'body': f.read()}

async def img_handler(request: web.Request) -> web.Response:
    auth = state['auth']
    if auth and [auth] != request['query'].get('auth', []):
        return {'code': 401,
                'body': '401'}
    else:
        with open('/tmp/screen.jpg', 'rb') as f:
            return {'code': 200,
                    'body': f.read()}

routes = [
    ('/',             {'get': handler}),
    ('/axios.min.js', {'get': js_handler}),
    ('/img.jpg',      {'get': img_handler}),
]

images = collections.deque()

cmd = """
    id=$(xdotool getactivewindow)
    path=/tmp/screen.jpg
    while true; do
        maim -i $id -m 6 -f jpg > $path.tmp
        mv -f $path.tmp $path
        echo
    done
"""

@util.misc.exceptions_kill_pid
def screenshotter():
    last_print = time.monotonic()
    last = time.monotonic()
    for path in subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE).stdout:
        # print fps every second
        now = time.monotonic()
        if now - last_print > 1:
            last_print = now
            print('fps:', 1 / (now - last))
        last = now

def main(crt: 'ssl.crt' = None,
         key: 'ssl.key' = None,
         auth: 'shared secret: https://localhost:8080?auth=AUTH' = None,
         millis: 'millis per frame in browser' = 30,
         port=8080):
    """
    screenshare by using maim to stream jpgs to a web browser
    """
    try:
        subprocess.check_output('which maim', shell=True)
    except:
        print('fatal: maim not found: github.com/naelstrof/maim')
        sys.exit(1)
    try:
        subprocess.check_output('which xdotool', shell=True)
    except:
        print('fatal: xdotool not found')
        sys.exit(1)
    state['auth'] = auth
    state['millis'] = millis
    if crt and key:
        options = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
        options.load_cert_chain(crt, key)
    else:
        options = None
    app = web.app(routes)
    server = tornado.httpserver.HTTPServer(app, ssl_options=options)
    server.listen(port)
    pool.thread.new(screenshotter)
    print('starting screenshare on port:', port)
    tornado.ioloop.IOLoop.current().start()

if __name__ == '__main__':
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    argh.dispatch_command(main)
