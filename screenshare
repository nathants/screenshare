#!/usr/bin/env pypy3
# type: ignore
import os
import sys
import argh
import functools
import collections
import subprocess
import time
import pool.thread
import tornado.ioloop
import util.misc
import web
import ssl

state = {}

async def handler(request: web.Request) -> web.Response:
    auth = state['auth']
    if auth and [auth] != request['query'].get('auth', []):
        return {'code': 401,
                'body': '401'}
    else:
        with open('index.html') as f:
            return {'code': 200,
                    'body': f.read().replace('AUTH', auth or 'AUTH')}

async def js_handler(request: web.Request) -> web.Response:
    with open('axios.min.js') as f:
        return {'code': 200,
                'body': f.read()}

@functools.lru_cache(maxsize=128)
def img(name):
    with open(name, 'rb') as f:
        return f.read()

async def img_handler(request: web.Request) -> web.Response:
    auth = state['auth']
    if auth and [auth] != request['query'].get('auth', []):
        return {'code': 401,
                'body': '401'}
    else:
        [last] = request['query']['last']
        while True:
            name = images[-1]
            if last != name:
                break
            await tornado.gen.sleep(0)
        return {'code': 200,
                'body': img(name),
                'headers': {'name': name}}

routes = [
    ('/',             {'get': handler}),
    ('/axios.min.js', {'get': js_handler}),
    ('/img.jpg',      {'get': img_handler}),
]

images = collections.deque()

@util.misc.exceptions_kill_pid
def cleanup():
    while True:
        time.sleep(1)
        to_delete = []
        while len(images) > 100:
            to_delete.append(images.popleft())
        if to_delete:
            subprocess.check_call(['rm', *to_delete])

cmd = """
    rm -f /tmp/screens.*.jpg
    for i in $(seq -w 1 999999); do
        path=/tmp/screens.$i.jpg
        maim -g 1920x1080 -m 5 -f jpg > $path
        echo $path
    done
"""

@util.misc.exceptions_kill_pid
def screenshotter():
    for line in subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE).stdout:
        line = line.decode().rstrip()
        images.append(line)

def main(crt: 'ssl.crt' = None,
         key: 'ssl.key' = None,
         auth: 'shared secret to be passed as url param ?auth=...' = None,
         port=8080):
    state['auth'] = auth
    try:
        subprocess.check_output('which maim', shell=True)
    except:
        print('fatal: maim not found: github.com/naelstrof/maim')
        sys.exit(1)
    if crt and key:
        options = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
        options.load_cert_chain(crt, key)
    else:
        options = None
    app = web.app(routes)
    server = tornado.httpserver.HTTPServer(app, ssl_options=options)
    server.listen(port)
    pool.thread.new(screenshotter)
    pool.thread.new(cleanup)
    tornado.ioloop.IOLoop.current().start()

if __name__ == '__main__':
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    argh.dispatch_command(main)
